package dataset

import (
	"encoding/json"
	"fmt"

	"github.com/ipfs/go-datastore"
)

// Query is a concrete record of executing an SQL query. It connects an
// AbstractQuery (which contains all SQL details of the query) and pointers
// to the datasets that were used in this particular exectution, referenced
// by their abstract name string
type Query struct {
	// private storage for reference to this object
	path datastore.Key
	// Syntax this query was written in
	Syntax string `json:"syntax,omitempty"`

	// TODO - currently removing b/c I think this might be too strict.
	// Platform is an identifier for the operating system that performed the query
	// Platform string `json:"platform,omitempty"`

	// AppVersion is an identifier for the application and version number that produced the result
	AppVersion string
	// Config outlines any configuration that would affect the resulting hash
	Config map[string]interface{}
	// Abstract is the path to the canonicalized version of this query
	Abstract *AbstractQuery
	// Resources is a map of all datasets referenced in this query, with alphabetical
	// keys generated by datasets in order of appearance within the query.
	// all tables referred to in the query should be present here
	// Keys are _always_ referenced in the form [a-z,aa-zz,aaa-zzz, ...] by order of appearence.
	// The query itself is rewritten to refer to these table names using bind variables
	Resources map[string]*Dataset
}

func NewQueryRef(path datastore.Key) *Query {
	return &Query{path: path}
}

func (q *Query) Path() datastore.Key {
	return q.path
}

func (q *Query) IsEmpty() bool {
	return q.Abstract == nil && q.Resources == nil
}

// _query is a private struct for marshaling into & out of.
// fields must remain sorted in lexographical order
type _query struct {
	Abstract   *AbstractQuery         `json:"abstract,omitempty"`
	AppVersion string                 `json:"appVersion,omitempty"`
	Config     map[string]interface{} `json:"config,omitempty"`
	Resources  map[string]*Dataset    `json:"resources,omitempty"`
	Syntax     string                 `json:"syntax,omitempty"`
}

// MarshalJSON satisfies the json.Marshaler interface
func (q Query) MarshalJSON() ([]byte, error) {
	// if we're dealing with an empty object that has a path specified, marshal to a string instead
	if q.path.String() != "" && q.IsEmpty() {
		return q.path.MarshalJSON()
	}

	return json.Marshal(&_query{
		Abstract:   q.Abstract,
		AppVersion: q.AppVersion,
		Config:     q.Config,
		Resources:  q.Resources,
		Syntax:     q.Syntax,
	})
}

// UnmarshalJSON satisfies the json.Unmarshaler interface
func (q *Query) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err == nil {
		*q = Query{path: datastore.NewKey(s)}
		return nil
	}

	_q := &_query{}
	if err := json.Unmarshal(data, _q); err != nil {
		return err
	}

	*q = Query{
		Abstract:   _q.Abstract,
		AppVersion: _q.AppVersion,
		Config:     _q.Config,
		Resources:  _q.Resources,
		Syntax:     _q.Syntax,
	}
	return nil
}

// UnmarshalQuery tries to extract a resource type from an empty
// interface. Pairs nicely with datastore.Get() from github.com/ipfs/go-datastore
func UnmarshalQuery(v interface{}) (*Query, error) {
	switch q := v.(type) {
	case *Query:
		return q, nil
	case Query:
		return &q, nil
	case []byte:
		query := &Query{}
		err := json.Unmarshal(q, query)
		return query, err
	default:
		return nil, fmt.Errorf("couldn't parse query")
	}
}

// AbstractQuery describes an SQL query on one or more structures
type AbstractQuery struct {
	// private storage for reference to this object
	path datastore.Key
	// Statement is the is parsed & rewritten to a _standard form_ to maximize hash overlap.
	// Writing a query to it's standard form involves making deterministic choices to
	// remove non-semantic whitespace, rewrite semantically-equivalent terms like "&&" and "AND"
	// to a chosen version, et cetera.
	// Greater precision of querying format will increase the chances of hash discovery.
	Statement string `json:"statement"`
	// Structure is a path to an algebraic structure that is the _output_ of this structure
	Structure *Structure
	// Structures is a map of all structures referenced in this query,
	// with alphabetical keys generated by datasets in order of appearance within the query.
	// Keys are _always_ referenced in the form [a-z,aa-zz,aaa-zzz, ...] by order of appearence.
	// The query itself is rewritten to refer to these table names using bind variables
	Structures map[string]*Structure `json:"structures"`
	// Syntax is an identifier string for the statement syntax (Eg, "SQL")
	Syntax string `json:"syntax"`
}

func (q *AbstractQuery) Path() datastore.Key {
	return q.path
}

// NewAbstractQueryReference creates an empty struct with it's
// internal path set
func NewAbstractQueryRef(path datastore.Key) *AbstractQuery {
	return &AbstractQuery{path: path}
}

func (q *AbstractQuery) IsEmpty() bool {
	return q.Statement == "" && q.Syntax == "" && q.Structure == nil && q.Structures == nil
}

// _abstractQuery is a private struct for marshaling into & out of.
// fields must remain sorted in lexographical order
type _abstractQuery struct {
	Structure  *Structure            `json:"outputStructure"`
	Statement  string                `json:"statement"`
	Structures map[string]*Structure `json:"structures"`
	Syntax     string                `json:"syntax"`
}

// MarshalJSON satisfies the json.Marshaler interface
func (q AbstractQuery) MarshalJSON() ([]byte, error) {
	// if we're dealing with an empty object that has a path specified, marshal to a string instead
	if q.path.String() != "" && q.Structure == nil && q.Syntax == "" && q.Structures == nil {
		return q.path.MarshalJSON()
	}

	return json.Marshal(&_abstractQuery{
		Structure:  q.Structure,
		Statement:  q.Statement,
		Structures: q.Structures,
		Syntax:     q.Syntax,
	})
}

// UnmarshalJSON satisfies the json.Unmarshaler interface
func (q *AbstractQuery) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err == nil {
		*q = AbstractQuery{path: datastore.NewKey(s)}
		return nil
	}

	_q := &_abstractQuery{}
	if err := json.Unmarshal(data, _q); err != nil {
		return err
	}

	*q = AbstractQuery{
		Structures: _q.Structures,
		Structure:  _q.Structure,
		Statement:  _q.Statement,
		Syntax:     _q.Syntax,
	}
	return nil
}

// UnmarshalAbstractQuery tries to extract a resource type from an empty
// interface. Pairs nicely with datastore.Get() from github.com/ipfs/go-datastore
func UnmarshalAbstractQuery(v interface{}) (*AbstractQuery, error) {
	switch q := v.(type) {
	case *AbstractQuery:
		return q, nil
	case AbstractQuery:
		return &q, nil
	case []byte:
		query := &AbstractQuery{}
		err := json.Unmarshal(q, query)
		return query, err
	default:
		return nil, fmt.Errorf("couldn't parse abstract query")
	}
}
